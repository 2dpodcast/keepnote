
1. Install an extension

Extensions are packaged in "*.kne" files which are zip files with the following
requirements.

1.1. File extension is .kne
1.2. Zip file contains a single directory named after the extension key
     (TODO: May relax this to several extensions)
1.3. The directory must contain the following files:
  1.3.1. "info.xml" - XML file describing basic information about extension.
  1.3.2. "__init__.py" - python source code of extension.

During installation, the *.kne is unzipped and the directory it contains is
copied to the user's extension path (e.g. ~/.config/keepnote/extensions).

A system path is read only, cannot uninstall these extension (can be
disabled).  A user path allows uninstalling.

By default there are two extension paths: the "system" path and the
"user" path.  Extensions appearing in these paths are called
"installed".

I could customize user paths with 
KEEPNOTE_PATH=


2. Scan extension paths

For each extension found in the paths, add it to a list of 
"installed extensions".


3. Import extensions

For each "installed extension", try to import it.  If import is successful
the extension is added to the "available extensions" list otherwise it is
unavailable (broken).


4. Enabling extensions

For each "available extension", the application decides whether it should be
"enabled".  An extension is enabled if it meets these criteria:

4.1. The extension is not in the list of "disabled extensions".  
4.2. The extension's dependencies are met.


5. Extension dependencies

The only dependency that is available right now are "version dependencies".
Each extension can give a list of version dependencies.

        Dependencies returned as a list of tuples (NAME, REL, EXTRA)

        NAME is a string identify an extension (or 'keepnote' itself).
        EXTRA is an object whose type depends on REL

        REL is a string representing a relation.  Options are:

          Version relations.  For each of these values for REL, the EXTRA
          field is interpreted as VERSION (see below):
            '>='   the version must be greater than or equal to
            '>'    the version must be greater than
            '=='   the version must be exactly equal to
            '<='   the version must less than or equal to
            '<'    the version must be less than
            '!='   the version must not be equal to

          Other relations.  
            'no'   the extension must not exist.  EXTRA is None.


        Possible values for EXTRA:

          VERSION   This is a tuple representing a version number.
            ex: the tuple (0, 6, 1) represents version 0.6.1


        All dependencies must be met to enable an extension.  A extension
        name can appear more than once if several relations are required
        (such as specifying a range of valid version numbers).

The extensions refencenced by NAME must be "available".


6. Uninstalling an extension

To uninstall an extension, it must first be disabled.  Then its directory
and all of its contents are deleted. 




=============================================================================
Life-time of extension

1. on_enabled(True)
2. on_add_ui(window)y

   Note, multiple windows may be openned and affected by the extension,
   i.e. each needs menus/other ui added to them.

3. on_remove_ui(window)
4. on_enabled(False)


=============================================================================
Extension data

base path of extension data_dir:
~/.config/keepnote/extensions_data/EXT_NAME/...


    def get_base_dir(self, exist=True):
        If 'exists' is True, create directory if it does not exists.
        """

    def get_data_dir(self, exist=True):
        """
        Returns the directory for storing data specific to this extension

        If 'exists' is True, create directory if it does not exists.
        """

    def get_data_file(self, filename, exist=True):
        """
        Returns a full path to a file within the extension's data directory

        If 'exists' is True, create directory if it does not exists.
        """
