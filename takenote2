#!/usr/bin/env python

import sys, os, tempfile, re

# pygtk imports
import pygtk
pygtk.require('2.0')
import gtk, gobject, pango
import gtk.gdk

from takenotelib.undo import UndoStack
from takenotelib.richtext import RichTextView



class TakeNoteTreeView (object):
    
    def __init__(self):
        
        # create a TreeStore with one string column to use as the model
        self.treestore = gtk.TreeStore(str)

        # we'll add some data now - 4 rows with 3 child rows each
        for parent in range(4):
            piter = self.treestore.append(None, ['parent %i' % parent])
            for child in range(3):
                self.treestore.append(piter, ['child %i of parent %i' %
                                              (child, parent)])
        
        # create the TreeView using treestore
        self.treeview = gtk.TreeView(self.treestore)

        # create the TreeViewColumn to display the data
        self.tvcolumn = gtk.TreeViewColumn('Column 0')

        # add tvcolumn to treeview
        self.treeview.append_column(self.tvcolumn)

        # create a CellRendererText to render the data
        self.cell = gtk.CellRendererText()

        # add the cell to the tvcolumn and allow it to expand
        self.tvcolumn.pack_start(self.cell, True)

        # set the cell "text" attribute to column 0 - retrieve text
        # from that column in treestore
        self.tvcolumn.add_attribute(self.cell, 'text', 0)

        # make it searchable
        self.treeview.set_search_column(0)

        # Allow sorting on the column
        self.tvcolumn.set_sort_column_id(0)

        # Allow drag and drop reordering of rows
        self.treeview.set_reorderable(True)


class TakeNoteSelector (object):
    
    def __init__(self):
        
        # Create a new scrolled window, with scrollbars only if needed
        scrolled_window = gtk.ScrolledWindow()
        scrolled_window.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)

        model = gtk.ListStore(gobject.TYPE_STRING)
        tree_view = gtk.TreeView(model)
        scrolled_window.add_with_viewport (tree_view)
        tree_view.show()

        # Add some messages to the window
        for i in range(10):
            msg = "Message #%d" % i
            it = model.append()
            model.set(it, 0, msg)

        cell = gtk.CellRendererText()
        column = gtk.TreeViewColumn("Messages", cell, text=0)
        tree_view.append_column(column)
        
        self.view = scrolled_window

        



class TakeNoteEditor (object):

    def __init__(self):
        sw = gtk.ScrolledWindow()
        sw.set_policy(gtk.POLICY_AUTOMATIC, gtk.POLICY_AUTOMATIC)
        self.textview = RichTextView()
        sw.add(self.textview)
        sw.show()
        self.textview.show()
        self.view = sw
        


class TakeNoteWindow (gtk.Window):
    def __init__(self):
        gtk.Window.__init__(self, gtk.WINDOW_TOPLEVEL)
        
        self.set_title("TakeNote")
        self.set_default_size(800, 600)
        self.connect("destroy", self.on_close)
        
        self.editor = TakeNoteEditor()
        
        # menu bar
        self.menu_items = (
            ( "/_File",         None,         None, 0, "<Branch>" ),
            ( "/File/_New",     "<control>N", None, 0, None ),
            ( "/File/_Open",    "<control>O", lambda w,e: self.editor.textview.load(), 0, None ),
            ( "/File/_Save",    "<control>S", lambda w,e: self.editor.textview.save(), 0, None ),
            ( "/File/Save _As", None,         None, 0, None ),
            ( "/File/sep1",     None,         None, 0, "<Separator>" ),
            ( "/File/Quit",     "<control>Q", gtk.main_quit, 0, None ),
            ( "/_Edit",         None,         None, 0, "<Branch>" ),
            ( "/Edit/Un_do",     "<control>Z", lambda w,e: self.editor.textview.undo(), 0, None),
            ( "/Edit/_Redo",     "<control>Y", lambda w,e: self.editor.textview.redo(), 0, None),
            ( "/Edit/_Bold",    "<control>B", self.editor.textview.on_bold, 0, None ),
            ( "/Edit/_Italic", "<control>I", self.editor.textview.on_italic, 0, None ),
            ( "/Edit/_Underline", "<control>U", self.editor.textview.on_underline, 0, None ),                        
            ( "/_Options",      None,         None, 0, "<Branch>" ),
            ( "/Options/Test",  None,         None, 0, None ),
            ( "/_Help",         None,         None, 0, "<LastBranch>" ),
            ( "/_Help/About",   None,         None, 0, None ),
            )

        main_vbox = gtk.VBox(False, 1)
        self.add(main_vbox)
        
        main_vbox.set_border_width(1)
        menubar = self.make_menubar(self.menu_items)
        main_vbox.pack_start(menubar, False, True, 0)
        
        
        # toolbar
        handlebox = gtk.HandleBox()
        toolbar = gtk.Toolbar()
        toolbar.set_orientation(gtk.ORIENTATION_HORIZONTAL)
        toolbar.set_style(gtk.TOOLBAR_ICONS)
        toolbar.set_border_width(0)
        handlebox.add(toolbar)
        main_vbox.pack_start(handlebox, False, True, 0)
        
        # our first item is <close> button
        iconw = gtk.Image() # icon widget
        iconw.set_from_file("bitmaps/open.xpm")
        close_button = toolbar.append_item(
            "Close",           # button label
            "Exit TakeNote", # this button's tooltip
            "Private",         # tooltip private info
            iconw,             # icon widget
            self.on_close)     # a signal
        #toolbar.append_space() # space after item
        
        self.font_sel = gtk.FontButton()
        toolbar.append_widget(self.font_sel, "Choose font", "")
        self.font_sel.connect("font-set", self.editor.textview.on_font_set)
        
        
        # create a hpaned widget and add it to our toplevel window
        hpaned = gtk.HPaned()
        main_vbox.pack_start(hpaned, True, True, 0)
        hpaned.set_position(150)

        # create a vpaned widget and add it to our toplevel window
        vpaned = gtk.VPaned()
        hpaned.add2(vpaned)
        vpaned.set_position(200)
        
        
        # status bar
        self.status_bar = gtk.Statusbar()      
        main_vbox.pack_start(self.status_bar, False, True, 0)  


        # add treeview
        self.treeview = TakeNoteTreeView()
        hpaned.add1(self.treeview.treeview)
        
        
        # add note selector
        self.selector = TakeNoteSelector()
        vpaned.add1(self.selector.view)
        #self.selector.view.show()
        
        
        # add note editor        
        vpaned.add2(self.editor.view)


        self.show_all()
        self.editor.textview.grab_focus()        
    
    
    def on_bold(self, widget, event):
        self.editor.on_bold(widget, event)
    
    
    # close the window and quit
    def on_close(self, widget):
        gtk.main_quit()
        return False
    
    
    def make_menubar(self, menu_items):
        accel_group = gtk.AccelGroup()

        # This function initializes the item factory.
        # Param 1: The type of menu - can be MenuBar, Menu,
        #          or OptionMenu.
        # Param 2: The path of the menu.
        # Param 3: A reference to an AccelGroup. The item factory sets up
        #          the accelerator table while generating menus.
        item_factory = gtk.ItemFactory(gtk.MenuBar, "<main>", accel_group)

        # This method generates the menu items. Pass to the item factory
        #  the list of menu items
        item_factory.create_items(menu_items)

        # Attach the new accelerator group to the window.
        self.add_accel_group(accel_group)

        # need to keep a reference to item_factory to prevent its destruction
        self.item_factory = item_factory
        # Finally, return the actual menu bar created by the item factory.
        return item_factory.get_widget("<main>")



class TakeNote (object):
    
    def __init__(self):        
        self.window = TakeNoteWindow()
        
        




#=============================================================================

def main():
    gtk.main()

if __name__ == "__main__":
    app = TakeNote()
    main()
